Data Mapper
===========

تعریف
-----
دیزاین پترن Data Mapper یک الگوی طراحیست که کار آن جداسازی منطق برنامه از لایه های سطح پایین برنامه مربوط به ذخیره
سازی و کار با لایه داده (دیتابیس)  هاست.

در واقع این دیزاین پترن یک نگاشت ایجاد می کنه بین آبجکت های برنامه و جدول های پایگاه داده.

فکر کنم اکثرا با ORM کار کرده باشید و این دیزاین پترن رو بشناسید.

چه زمانی استفاده میشه؟
----------------------
این الگو تقریبا در تمام فریمورک های مطرح برای جداسازی لایه منطق و بخش کار با سیستم ذخیره سازی مورد استفاده قرار گرفته.

به عنوان مثال الگویی که در پیاده سازی Doctrine استفاده شده Data Mapper هست.

دقت کنید که لایه مدل ها و Eloquent در لاراول از Active Record Pattern استفاده می کنه و این دو الگو با هم فرق دارن.

اجزاء
-----
این دیزاین پترن از چند قسمت اصلی تشکیل شده که با هم مرور می کنیم.

بخش اول **دیتابیس** هست که همون لایه ذخیره سازی برنامه محسوب میشه. همون قسمتی که قراره از منطق برنامه جدا بشه!

بخش بعد **Domain Objects** هستن که نماینده ی موجودیت های برنامه هستن، موجودیت هایی مثل کاربران، محصولات، سفارشات و...

و در نهایت هم یک **نگاشت کننده داده یا Data Mapper** داریم که میان این دو قسمت قرار میگیره و کارش هم مشخصه!

.. image:: UML.gif
   :alt: UML of Data Mapper Design Pattern
   :align: center

.. caution::
   .. centered:: ✅ مزایای استفاده
   برخلاف Active Record اصل تک مسئولیتی را رعایت می کند

   بسیار منعطف هست و امکان گسترش و سفارشی سازی خیلی خوبی به توسعه دهنده میده

   جداسازی منطق و سطوح پایین برنامه و رعایت اصل Open/Closed از اصول SOLID

.. warning::
   .. centered:: ❌ معایب استفاده
   ممکنه کمی انجام setup اون برای توسعه دهنده ها زمان بر باشه

کاربرد عملی
-----------
خب بریم برای پیاده سازی یک مثال عملی از کلاس User و پیاده سازی Mapper مربوطه.

پیاده سازی
-----------
قبل از هر چیز کلاس User رو داریم:

.. literalinclude:: User.php
   :language: php
   :linenos:

و بعد Mapper رو به این صورت تعریف می کنیم:

.. literalinclude:: UserMapper.php
   :language: php
   :linenos:

این Mapper عملیات خواندن و نوشتن رو در پایگاه داده انجام میده.

نحوه فراخوانی
-------------

.. literalinclude:: Call.php
   :language: php
   :linenos:

فکر کنم نیاز به توضیح نداره و همه چیز کاملا مشخصه!