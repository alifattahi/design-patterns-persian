Mediator
========

تعریف
-----
دیزاین پترن Mediator یک الگوی رفتاری محسوب میشه که جلوی دسترسی مستقیم آبجکت ها به همدیگه رو میگیره و در واقع بین
آبجکت ها قرار میگیره تا فقط به واسطه ی Mediator با هم در ارتباط باشن و از Interface واقعی همدیگه مطلع نباشن.

از این طریق میزان Coupling بین آبجکت ها رو بسیار کاهش میده.

چه زمانی استفاده میشه؟
----------------------
زمانی که در برنامه احساس می کنیم وابستگی یا Coupling زیادی بین اجزا وجود داره این الگو رو به کار میگیریم تا وابستگی
رو کاهش بدیم.

یا به عنوان در GUI یا رابط های کاربری گرافیکی که اجزای گرافیکی فرم واسطی هستن برای ارتباط کاربر نهایی با کلاس های
برنامه.

اجزاء
-----
الگوی طراحی Mediator از چند بخش اصلی تشکیل میشه:

بخش اول اون **Mediator** هست که بین بخش های مختلف برنامه قرار میگیره و ارتباط اون ها رو مدیریت می کنه.

و بخش بعد هم **Colleague** ها هستن که بخش هایی هستن که قصد ارتباط با همدیگه رو دارن.

.. image:: UML.png
   :alt: UML of Chain of Responsibility Design Pattern
   :align: center

Kostyantyn Yuriyovich Kolesnichenko, Public domain, via Wikimedia Commons

.. caution::
   .. centered:: ✅ مزایای استفاده
   کاهش چشمگیر Coupling و وابستگی بین کلاس ها

   ساده سازی ارتباط میان کلاس ها

   رعایت اصلی تک مسئولیتی از اصول SOLID و Open/Closed طبق توضیحاتی که داده شد

   امکان پیمایش موازی یک Collection به صورت جداگانه

   افزایش امکان استفاده مجدد از اجزای برنامه به علت Decouple شدن اجزا

.. warning::
   .. centered:: ❌ معایب استفاده
   اعمال این الگو در مواردی که واقعا بهش نیاز نیست و Collection های پیچیده ای وجود نداره بسیار اشتباه هست

کاربرد عملی
-----------
خب یکی از مهم ترین کاربردهای این الگو در زبان هایی هست که رابط گرافیکی محور یا GUI-Based هستن پس میشه گفت خیلی در PHP
کاربرد زیادی نداره اما در مواردی مثل Event dispatcher ها در بسیار فریمورک های PHP مورد استفاده قرار میگیره.

خب فرض کنید در حال طراحی یک برنامه پیام رسان در PHP هستیم و قصد پیاده سازی قابلیت چت گروهی رو داریم.

هر گروه میتونه چندین کاربر داشته باشه و کاربر ها میتونن توی گروه پیام ارسال کنن.

بریم ببینیم چطور میشه با این الگو پیادش کرد.

پیاده سازی
-----------
قبل از هر چیز Interface مربوط به Mediator رو تعریف می کنیم:

.. literalinclude:: GroupChatMediatorInterface.php
   :language: php
   :linenos:

در این برنامه کلاس های User و GroupChat همون Colleague ها محسوب میشن که به این صورت اون ها رو تعریف می کنیم:

.. literalinclude:: User.php
   :language: php
   :linenos:

.. literalinclude:: GroupChat.php
   :language: php
   :linenos:

و در نهایت Mediator ما به این صورت پیاده سازی میشه:

.. literalinclude:: Mediator.php
   :language: php
   :linenos:

نحوه فراخوانی
-------------

.. literalinclude:: Call.php
   :language: php
   :linenos:

به همین زیبایی!