Factory Method
==============

تعریف
-----
الگوی Factory Method یک الگو از نوع الگوهای سازنده یا Creational محسوب میشه که کار اصلی اون ایجاد شی بدون اطلاع سطوح
بالاتر از جزئیات نحوه ایجاد شی هست.

تفاوتی که با دیگر الگوهای Factory داره اینه که کلاس Factory اصلی یک سری زیرکلاس داره که هر کدوم با استراتژی متفاوتی
به ایجاد اشیاء میپردازن که البته این اشیاء ایجاد شده هم همگی interface مشابهی رو پیاده سازی می کنن.

اجزاء
-----
الگوی طراحی Factory Method از چند بخش اصلی تشکیل میشه:

1.   کلاس abstract یا interface والد Factory.

2.   زیرکلاس های Factory که هر کدوم مسئول ساخت اشیاء از انواع مختلف هستن.

3.   کلاس abstract یا interface که مشخص کننده ی خصیصه ها و متدهای مشترک بین اشیاء تولیدی هست.

4.   و در نهایت زیرکلاس هایی که کلاس مورد سوم رو پیاده سازی می کنن و انواع مختلف اشیاء نهایی رو مشخص می کنن.

.. image:: structure.png
   :alt: Structure of Factory Method
   :align: center
تصویر از وب سایت refactoring.guru

چه زمانی استفاده میشه؟
----------------------
این الگو زمانی استفاده میشه که امکان پیش بینی انواع آبجکت هایی که قرار هست تولید بشن وجود نداره و ممکنه هر نوع جدید
به روش متفاوتی تولید بشه.

از مهم ترین دستاوردهای استفاده از این الگوی طراحی در برنامه میشه کمک به رعایت اصول Single Responsibility، Open/Closed
Principle و Dependency Inversion از اصول SOLID رو نام برد.

.. caution::
   .. centered:: ✅ مزایای استفاده
   استفاده از این الگو باعث میشه در سطح بالای برنامه وابستگی به سطوح پایین و انواع پیاده سازی ها از بین بره و
   کلاس های Factory مسئول آماده کردن تنظیمات و سپس ایجاد اشیاء بشن و این مسئولیت رو از روی دوش سطوح بالاتر برنامه بردارن.

   مثلا اگر کد های فراخوانی API مربوط به دسترسی به درگاه پرداخت رو در خود کلاس اصلی برنامه بنویسیم و بعدا کارفرما قصد
   عوض کردن API و روش پرداخت رو داشته باشه مجبوریم تمام تغییرات رو در خود کلاس اصلی ایجاد کنیم در صورتی که با این روش
   سطوح بالای برنامه رو درگیر فراخوانی API نخواهیم کرد.

.. warning::
   .. centered:: ❌ معایب استفاده
   پیچیده تر شدن برنامه به علت نیاز به تعریف انواع زیرکلاس های Factory و اشیاء تولیدی

کاربرد عملی
-----------
تصویر کنید ما یک فروشگاه طراحی کردیم که محصولات مختلفی در اون به فروش میرسه. مواردی مثل کتاب و لباس و محصولات
الکترونیک و...

هر کدوم از این نوع محصولات خصیصه های متفاوتی هم دارن مثل نام و قیمت و توضیحات.

برای ایجاد شی از هر نوع محصول می تونیم از الگوی Simple Factory استفاده کنیم.

پیاده سازی
-----------
برای پیاده سازی این الگو ابتدا یک interface یا abstract تعریف می کنیم که مشخص کننده ی خصیصه های محصولی هست که قراره
تولید بشه:

.. literalinclude:: Product.php
   :language: php
   :linenos:

حالا انواع محصولات رو به این صورت تعریف می کنیم:

.. literalinclude:: Products.php
   :language: php
   :linenos:

و در نهایت هم کلاس ProductFactory رو داریم که در واقع همون Simple Factory محسوب میشه:

.. literalinclude:: ProductFactory.php
   :language: php
   :linenos:

نحوه فراخوانی
-------------

.. code-block::  php
   :linenos:

   $productFactory = new ProductFactory();
   $product = $productFactory->createProduct("book", "The Lord of the Rings", 20.99, "A classic fantasy novel.");
   echo $product->getName() . "\n";
   echo $product->getPrice() . "\n";
   echo $product->getDescription() . "\n";

.. _`Static Factory`: https://design-patterns-in-persian.readthedocs.io/en/latest/Creational/StaticFactory/README.html